/* 1. fp/backend/server.js (El Controlador y Punto de Entrada)
Este archivo act√∫a como el Controlador o Capa de Routers. Sus responsabilidades son:

1. **Configuraci√≥n de Express y MongoDB:** Inicia el servidor Express y establece la conexi√≥n principal a la base de datos **MongoDB** usando **Mongoose**.
2. **Definici√≥n de Middlewares:** Configura middlewares esenciales (CORS, body-parser JSON).
3. **Definici√≥n de Rutas (Endpoints):** Define las rutas p√∫blicas de la API (ej: /api/register, /api/login).
4. **Delegaci√≥n As√≠ncrona:** Delega la l√≥gica de negocio y persistencia de datos (ahora as√≠ncrona) a la capa de servicios (userService).
5. **Manejo de Respuesta:** Maneja la respuesta HTTP (c√≥digos de estado 200, 401, 409, etc.) y el formato JSON.

Lo crucial: Este archivo **coordina** la aplicaci√≥n, pero el m√≥dulo 'userService' es quien interact√∫a directamente con Mongoose para leer y escribir en la base de datos.
*/

/**
 * @file server.js
 * @brief Punto de entrada de la aplicaci√≥n backend.
 * * Configura la conexion a MongoDB y el servidor Express. Define las rutas de la API, 
 * delegando la l√≥gica de negocio y persistencia al m√≥dulo userService.
 */

// 1. IMPORTACIONES Y CONFIGURACI√ìN INICIAL
const express = require('express');
// Importamos el m√≥dulo de servicio (nuestra l√≥gica de negocio encapsulada)
const userService = require('./services/userService'); 
const mongoose = require('mongoose');

const app = express();
const PORT = 3000;

const DB_URI = process.env.MONGO_URI || 'mongodb+srv://adminUserA:rzVBpgvkVWCmcMBQ@cluster0.ysdsjmm.mongodb.net/Project0?retryWrites=true&w=majority&appName=Cluster0'; 

mongoose.connect(DB_URI)
    .then(() => console.log('‚úÖ Conexi√≥n exitosa a MongoDB.'))
    .catch(err => {
        console.error('‚ùå Error de conexi√≥n a MongoDB:', err.message);
    });

// 2. MIDDLEWARES (Configuraciones para Express)
/**
 * @brief Middleware para el an√°lisis del cuerpo de peticiones entrantes.
 * * Habilita la lectura de datos JSON enviados en el cuerpo de las peticiones (e.g., POST, PUT).
 */
app.use(express.json()); 

/**
 * @brief Middleware de Control de Acceso (CORS) Temporal.
 * * Permite que el frontend (que probablemente se ejecute en un puerto diferente)
 * pueda hacer peticiones a este servidor backend sin ser bloqueado.
 * ‚ö†Ô∏è NOTA: El '*' en Access-Control-Allow-Origin permite cualquier origen y DEBER√çA
 * ser restringido en un entorno de producci√≥n por motivos de seguridad.
 */
app.use((req, res, next) => {
    res.setHeader('Access-Control-Allow-Origin', '*'); 
    res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    next(); // Permite que la petici√≥n contin√∫e a la ruta definida
});

// 3. RUTAS (Endpoints de la API para la Gesti√≥n de Usuarios)

/**
 * @brief Endpoint para el registro de nuevos usuarios.
 * * @route POST /api/register
 */
app.post('/api/register', async (req, res) => {
    const { username, email, password } = req.body;

    // Validaci√≥n de datos simple
    if (!username || !email || !password) {
        return res.status(400).json({ error: 'Todos los campos son obligatorios.' });
    }

    // üí° DELEGACI√ìN: El controlador llama al servicio, sin saber d√≥nde se almacenan los datos.
    const nuevoUsuario = await userService.registerUser(username, email, password);

    if (nuevoUsuario === null) {
        // 409: Conflicto - Email/username duplicado
        return res.status(409).json({ error: 'Este email o nombre de usuario ya est√° registrado.' });
    }

    // 201: Creado
    return res.status(201).json({ 
        id: nuevoUsuario._id,
        username: nuevoUsuario.username,
        email: nuevoUsuario.email,
        message: 'Usuario registrado exitosamente.' 
    });
});

/**
 * @brief Endpoint para el inicio de sesi√≥n (Login).
 * * @route POST /api/login
 */
app.post('/api/login', async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ error: 'Email y contrase√±a son obligatorios.' });
    }

    // üí° DELEGACI√ìN: El controlador llama al servicio, que ahora es AS√çNCRONO.
    const usuario = await userService.findUserByCredentials(email, password);

    if (!usuario) {
        // 401: No autorizado - Credenciales inv√°lidas
        return res.status(401).json({ error: 'Credenciales inv√°lidas.' });
    }

    // 200: OK - Login exitoso
    return res.status(200).json({ 
        id: usuario._id, 
        username: usuario.username, 
        email: usuario.email,
        message: 'Inicio de sesi√≥n exitoso.' 
    });
});

/**
 * @brief Endpoint de Bienvenida.
 * * @route GET /
 */
app.get('/', (req, res) => {
    res.status(200).send('<h1>API de Recetas Activa</h1><p>Los endpoints de autenticaci√≥n son POST /api/register y POST /api/login</p>');
});


// 4. INICIO DEL SERVIDOR
app.listen(PORT, () => {
  console.log(`\n==============================================`);
  console.log(` SERVIDOR BACKEND INICIADO`);
  console.log(`Puerto: http://localhost:${PORT}`);
  console.log(`==============================================`);
  console.log(`Rutas disponibles:`);
  console.log(`  - POST /api/register (Registro)`);
  console.log(`  - POST /api/login    (Login)`);
  console.log(`\n`);
});